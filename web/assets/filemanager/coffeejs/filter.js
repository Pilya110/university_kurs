// Generated by CoffeeScript 1.11.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Filter = (function(superClass) {
    extend(Filter, superClass);

    function Filter() {
      return Filter.__super__.constructor.apply(this, arguments);
    }

    Filter.prototype.searchName = null;

    Filter.prototype.searchType = null;

    Filter.prototype.timeout = null;

    Filter.prototype.className = 'col-md-12';

    Filter.prototype.events = {
      'input [name="name"]': 'searchByName'
    };

    Filter.prototype.initialize = function() {
      return this.render();
    };

    Filter.prototype.render = function() {
      return this.$el.css({
        'margin-bottom': '5px'
      }).html(document.getElementById('filter-render').innerHTML);
    };

    Filter.prototype.searchByName = function() {
      var input;
      input = this.$el.find('[name="name"]');
      this.searchName = input.val().toLowerCase();
      if (3 > this.searchName.length) {
        this.searchName = null;
      }
      return this.searchList();
    };

    Filter.prototype.searchByType = function() {
      var input;
      input = this.$el.find('[name="type"]');
      this.searchType = input.val().toLowerCase();
      if (0 === this.searchType.length) {
        this.searchType = null;
      }
      return this.searchList();
    };

    Filter.prototype.searchList = function() {
      var self;
      self = this;
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
      return this.timeout = setTimeout(function() {
        return list.search(self.searchName);
      }, 500);
    };

    return Filter;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=filter.js.map
