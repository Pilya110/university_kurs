// Generated by CoffeeScript 1.11.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Table = (function(superClass) {
    extend(Table, superClass);

    function Table() {
      return Table.__super__.constructor.apply(this, arguments);
    }

    Table.prototype.tagName = 'table';

    Table.prototype.className = 'table table-condensed table-hover table-bordered';

    Table.prototype.initialize = function(data) {
      this.fields = data.fields;
      this.table = data.table;
      this.$el.css({
        'background-color': 'white'
      });
      return this.render();
    };

    Table.prototype.render = function() {
      var f, self, tr;
      tr = $('<tr></tr>');
      for (f in this.fields) {
        tr.append('<th>' + this.fields[f] + '</th>');
      }
      this.$el.append(tr);
      self = this;
      return $.ajax({
        url: '/table',
        type: 'GET',
        data: {
          table: this.table
        },
        dataType: 'json',
        success: function(list) {
          if (list) {
            self.setItems(list);
            return;
          }
          throw new Error('Не удалось получить список');
        },
        error: function(e) {
          throw new Error('Не удалось получить список', e.getMessage());
        }
      });
    };

    Table.prototype.setItems = function(list) {
      var i, item, len, results;
      results = [];
      for (i = 0, len = list.length; i < len; i++) {
        item = list[i];
        results.push(this.$el.append((new TableTr({
          item: item,
          fields: this.fields,
          table: this.table
        })).$el));
      }
      return results;
    };

    return Table;

  })(Backbone.View);

  window.TableTr = (function(superClass) {
    extend(TableTr, superClass);

    function TableTr() {
      return TableTr.__super__.constructor.apply(this, arguments);
    }

    TableTr.prototype.tagName = 'tr';

    TableTr.prototype.initialize = function(data1) {
      this.data = data1;
      return this.render();
    };

    TableTr.prototype.render = function() {
      var field, results;
      results = [];
      for (field in this.data.fields) {
        console.log(field, this.data.item[field]);
        results.push(this.$el.append('<td>' + this.data.item[field] + '</td>'));
      }
      return results;
    };

    return TableTr;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=table.js.map
